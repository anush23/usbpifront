@mixin padding-two-param($top-bottom, $right-lef){
  padding:$top-bottom $right-lef;
}
@mixin padding($top, $right, $bottom, $left){
  padding: $top $right $bottom $left;
}
@mixin transition($transition...){
  -webkit-transition: $transition;
  -moz-transition: $transition;
  -ms-transition: $transition;
  -o-transition: $transition;
  transition: $transition;
}
@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
  -moz-border-radius: $radius;
  -ms-border-radius: $radius;
  border-radius: $radius;
}
@mixin position_absolute($pos,$top,$right,$bottom,$left){
  position: $pos;
  top:$top;
  right: $right;
  bottom: $bottom;
  left: $left;
}
@mixin padding-bottom($pad-bottom){
  padding-bottom: $pad-bottom;
}
@mixin font-source($size: false, $colour: false, $weight: false,  $lh: false, $lsp:false) {
  @if $size { font-size: $size; }
  @if $colour { color: $colour; }
  @if $weight { font-weight: $weight; }
  @if $lh { line-height: $lh; }
  @if $lsp { letter-spacing: $lsp; }
}
@mixin background($imgpath,$repeat,$size) {
  background: {
    image: url($imgpath);
    size: $size;
    repeat: $repeat;
  }
}
@mixin input-placeholder {
  &.placeholder { @content; }
  &:-moz-placeholder { @content; }
  &::-moz-placeholder { @content; }
  &:-ms-input-placeholder { @content; }
  &::-webkit-input-placeholder { @content; }
}
@mixin push-auto {
  margin: {
    left: auto;
    right: auto;
  }
}
@mixin transform($transforms) {
  -moz-transform: $transforms;
  -o-transform: $transforms;
  -ms-transform: $transforms;
  -webkit-transform: $transforms;
  transform: $transforms;
}
@mixin transform-origin ($origin) {
  moz-transform-origin: $origin;
  -o-transform-origin: $origin;
  -ms-transform-origin: $origin;
  -webkit-transform-origin: $origin;
  transform-origin: $origin;
}
@mixin scale($scale) {
  @include transform(scale($scale));
}
@mixin box-shadow($top, $left, $blur, $color, $inset:"") {
  -webkit-box-shadow:$top $left $blur $color #{$inset};
  -moz-box-shadow:$top $left $blur $color #{$inset};
  box-shadow:$top $left $blur $color #{$inset};
}
@mixin animation($animate...) {
  $max: length($animate);
  $animations: '';
  @for $i from 1 through $max {
    $animations: #{$animations + nth($animate, $i)};

    @if $i < $max {
      $animations: #{$animations + ", "};
    }
  }
  -webkit-animation: $animations;
  -moz-animation:    $animations;
  -o-animation:      $animations;
  animation:         $animations;
}
@mixin media($point) {
  @if $point == maxh-900 {
    @media (max-width: 900px) { @content; }
  }
}
@mixin keyframes($animationName) {
  @-webkit-keyframes #{$animationName} {
    @content;
  }
  @-moz-keyframes #{$animationName} {
    @content;
  }
  @-o-keyframes #{$animationName} {
    @content;
  }
  @keyframes #{$animationName} {
    @content;
  }
}
@mixin font-face($font-family, $font-weight, $font-style) {
  font-family: $font-family;
  font-weight: $font-weight;
  font-style: $font-style;
}
@mixin centerer {
  position: absolute;
  left: 50%;
  @include transform(translate(-50%, 0));
}
@mixin vertical-centerer {
  position: absolute;
  left: 50%;
  top: 50%;
  @include transform(translate(-50%, -50%));
}
$breakpoints: (
        "phone":        400px,
        "phone-wide":   480px,
        "phablet":      560px,
        "tablet-small": 640px,
        "tablet":       768px,
        "tablet-w":     992px,
        "tablet-wide":  1024px,
        "desktop":      1248px,
        "desktop-wide": 1440px
);
@mixin mq($width, $type: min) {
  @if map_has_key($breakpoints, $width) {
    $width: map_get($breakpoints, $width);
    @if $type == max {
      $width: $width - 1px;
    }
    @media only screen and (#{$type}-width: $width) {
      @content;
    }
  }
}
